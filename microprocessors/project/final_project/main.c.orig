/*!
@file main.c
@author Clark Gredona 260458872
@author Harsh Aurora
@author Loren Lugosch 260404057
@author Radhika Chandra 260427945
@brief ECSE 426 final project main program.
*/

#include "arm_math.h"
#include "stdio.h"


#include "stm32f4xx.h"
#include "cmsis_os.h"
#include "g2_keypad.h"
#include "g2_wireless.h"
#include "g2_button.h"
#include "lcd.h"
#include "cc2500.h"
#include "g2_servo.h"

#define LENGTH 20
#define MASTER_MODE 0 // send data/commands to slave board
#define SLAVE_MODE 1 // receive data/commands from master board


typedef enum {
	MIMIC_MODE = 0,
	DIRECT_MODE = !MIMIC_MODE
} g2_control_mode;

typedef struct {
	uint8_t length;
 g2_control_mode mode;
	uint8_t * payload;
} g2_packet_t;


osMailQDef(packet_mail_box, sizeof(g2_packet_t), g2_packet_t);
osMailQId  packet_mail_box;


osMailQDef(angle_mail_box, sizeof(g2_packet_t), g2_packet_t);
osMailQId  angle_mail_box;

void thread_user_input(void const * argument);
void thread_display(void const * argument);
void thread_wireless_master(void const * argument);
void thread_wireless_slave(void const * argument);
void thread_test(void const * argument);
void thread_slave_test(void const * argument);
void thread_direct_control(void const * argument);
void thread_mimicking(void const * argument);
void thread_motor(void const * argument);




uint8_t result, status, status_test;
uint8_t mode = MASTER_MODE;
uint8_t version, partnum, zero=0, one=1, two=2, three=3, burst[3]={0,0,0};
char chars[LENGTH];
char c, choose;
uint8_t datums[5], tx_num = 0, rx_num = 0, ovrflo = 0, Rbuf[5];

osMutexId char_mutex;
osMutexId test_mutex;
osMutexDef(char_mutex);
osMutexDef(test_mutex);

//! Thread structure for above thread
osThreadDef(thread_user_input, osPriorityNormal, 1, 0);
osThreadDef(thread_display, osPriorityNormal, 1, 0);
osThreadDef(thread_wireless_master, osPriorityNormal, 1, 0);
osThreadDef(thread_wireless_slave, osPriorityNormal, 1, 0);
osThreadDef(thread_test, osPriorityNormal, 1, 0);
osThreadDef(thread_slave_test, osPriorityNormal, 1, 0);

osThreadDef(thread_direct_control, osPriorityNormal, 1, 0);
osThreadDef(thread_mimicking, osPriorityNormal, 1, 0);
osThreadDef(thread_motor, osPriorityNormal, 1, 0);


// ID for thread
osThreadId tid_thread_user_input;
osThreadId tid_thread_display;
osThreadId tid_thread_wireless_master;
osThreadId tid_thread_wireless_slave;
osThreadId tid_test;
osThreadId tid_slave_test;
osThreadId tid_thread_direct_control;
osThreadId tid_thread_mimicking;
osThreadId tid_thread_motor;


uint8_t buf = 0;

/*!
 @brief Program entry point
 */
int main (void) {

	// Mutex for display
	char_mutex = osMutexCreate(osMutex(char_mutex));
	test_mutex = osMutexCreate(osMutex(test_mutex));
	
	// Start threads
	if (mode == MASTER_MODE) {
		//tid_thread_display = osThreadCreate(osThread(thread_display), NULL);
		tid_thread_wireless_master = osThreadCreate(osThread(thread_wireless_master), NULL);
		//tid_thread_user_input = osThreadCreate(osThread(thread_user_input), NULL);
		tid_test = osThreadCreate(osThread(thread_test), NULL);

	}
	
	else {		
		//servo_setup();
		//turn_to_angle(0);
		//tid_thread_wireless_slave = osThreadCreate(osThread(thread_wireless_slave), NULL);
		tid_slave_test = osThreadCreate(osThread(thread_slave_test), NULL);

	}

  osDelay(osWaitForever);
}

/* CC2500 WATCH TEST */
void thread_wireless_master (void const *argument) {
	CC2500_Init();
	user_button_GPIO_setup();
	button_interrupt_setup();
	uint8_t datum[5], i = 0;
	for(i=0;i<5;i++)
		datum[i] = i;
	
	while(1) {
		osSignalWait(0x01, osWaitForever);
    
			osMutexWait(test_mutex, osWaitForever);
				
				CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, TX);
				CC2500_Write(datum,0x3F,5);
				CC2500_Strobe(CC2500_CMDSTROBE_STX, TX);
				osSignalSet(tid_test, 0x01);
				
			osMutexRelease(test_mutex);
		/*	
		osDelay(20000);

			osMutexWait(test_mutex, osWaitForever);
				
				
				CC2500_Strobe(CC2500_CMDSTROBE_SFTX, TX);
				CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, TX);
				CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, TX);
				//status = CC2500_Strobe(CC2500_CMDSTROBE_SFTX, TX);
				//status = CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, TX);
				//status = CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, TX);

			osMutexRelease(test_mutex);
		*/
	}
}

void thread_test (void const *argument) {
		
		osSignalWait(0x01, osWaitForever);
    
		while(1) {
			osMutexWait(test_mutex, osWaitForever);
	  
				status_test = CC2500_Strobe(CC2500_CMDSTROBE_SNOP, TX);
				tx_num = CC2500_ReadStatusReg(CC2500_STATUSREG_TXBYTES_ADDR);
				ovrflo = tx_num & 0x80;
				tx_num &= 0x7F;
				
				if(ovrflo == 0x80)
					CC2500_Strobe(CC2500_CMDSTROBE_SFTX, TX);
		
			osMutexRelease(test_mutex);
			
			osDelay(2000);
		}
}

void thread_slave_test (void const *argument) {
		    
		while(1) {
			
			CC2500_Strobe(CC2500_CMDSTROBE_SRX, RX);
			
			rx_num = CC2500_ReadStatusReg(CC2500_STATUSREG_RXBYTES_ADDR);
			if(rx_num == 5) {
				CC2500_Read(Rbuf,0x3F,5);
				CC2500_Strobe(CC2500_CMDSTROBE_SFRX, RX);
				CC2500_Strobe(CC2500_CMDSTROBE_SIDLE, RX);
				CC2500_Strobe(CC2500_CMDSTROBE_SCAL, RX);
			}
		}
}

void thread_wireless_slave (void const *argument) {
	
	
	CC2500_Init();
	
	
	uint8_t dummy_payload[2];
	dummy_payload[0] = 50;
	dummy_payload[1] = 21;
	
	g2_packet_t	packet_s;
	packet_s.length = 2;
	packet_s.payload = dummy_payload;
	packet_s.mode = MIMIC_MODE;
	
	osMailPut(packet_mail_box, &packet_s);
	
	if (packet_s.mode == MIMIC_MODE) {
			osSignalSet(tid_thread_mimicking, 0x01);
	} else {
		osSignalSet(tid_thread_direct_control, 0x01);
	}
	
	
  
//	CC2500_Strobe(CC2500_CMDSTROBE_SRX, RX);
    
   // while (1) {
 //       CC2500_Read(datums, RX_FIFO, 5);
  //  }
	
}

/*!
 @brief Thread for keypad
 */
void thread_user_input (void const *argument) {
	g2_keypad_init();
	UserInputState state = WAIT_FOR_INPUT;
	char user_input;
	uint16_t input_count = 0;
	
	while (1) {
		switch(state) {
			case WAIT_FOR_INPUT:
				user_input = g2_read_keypad();
			
				// handle no input
				if (user_input == NO_KEYPAD_INPUT){
					osDelay(10);
					break;
				}
				
				// handle non-numeric input
				if (user_input == 'A' || user_input == 'B' || user_input == 'C' || user_input == 'D' || user_input == '*' || user_input == '#') {
					state = INPUT_ERROR;
					osMutexWait(char_mutex, osWaitForever);
					c = KEYPAD_ERROR;
					osMutexRelease(char_mutex);
					osSignalSet(tid_thread_display,0x01); // signal the LCD
				}
				
				// handle correct input
				else {
					osMutexWait(char_mutex, osWaitForever);
					c = user_input;
					osMutexRelease(char_mutex);
					
					osSignalSet(tid_thread_display,0x01); // signal the LCD
					state = WAIT_FOR_BUTTON_RELEASE;
				}
				
				osDelay(10);
				break;
				
			case WAIT_FOR_BUTTON_RELEASE:
				user_input = g2_read_keypad();
			
				// button still being pushed
				if (user_input != NO_KEYPAD_INPUT) {
					osDelay(10);
					break;
				}
			
				// more input left left to read
				if (input_count < 6) {
					input_count++;
					state = WAIT_FOR_INPUT;
				}
				
				// done reading input
				else {
					input_count = 0;
					state = WAIT_FOR_SEND_COMMAND;
				}
				
				osDelay(10);
				break;
			
			case WAIT_FOR_SEND_COMMAND:
				user_input = g2_read_keypad();
				if (user_input != KEYPAD_SEND_COMMAND) {
					if (user_input == NO_KEYPAD_INPUT) state = WAIT_FOR_SEND_COMMAND;
					else state = SEND_ERROR;
				}
				else {
					osMutexWait(char_mutex, osWaitForever);
					c = user_input;
					osMutexRelease(char_mutex);
					state = SENDING;
					osSignalSet(tid_thread_display,0x01); // signal the LCD
				}
				osDelay(10);
				break;
			
			case INPUT_ERROR:
			// display error message for a moment
				osDelay(500);
				state = WAIT_FOR_INPUT;
				osDelay(10);
				break;
			
			case SEND_ERROR:
			// display error message for a moment
				state = WAIT_FOR_SEND_COMMAND;
				osDelay(10);
				break;
			
			case SENDING:
				osDelay(500); // wait for some kind of ACK
				state = WAIT_FOR_INPUT;
				osDelay(10);
				break;
			
			default: // if undefined state, jump back to input state
				state = WAIT_FOR_INPUT;
				osDelay(10);
				break;
		}

	}
}

/*!
 @brief Thread for keypad
 */
void thread_wireless(void const *argument) {
    g2_wireless_gpio_spi_setup();
}

void thread_display (void const *argument) {
  
  LCD_SettingsTypeDef LCD_SettingsStruct;
  LCD_DisplayTypeDef LCD;
  
  LCD.DisplayEnable = LCD_ON;
  LCD.CursorBlink = LCD_ON;
  LCD.CursorUnderline = LCD_ON;
  LCD_Init(&LCD);
  
  LCD_SettingsStruct.IncrDecr = INCREASE;
	LCD_SettingsStruct.DisplayShiftEn = LCD_OFF;
	LCD_SettingsStruct.ShiftSettings = CURSOR_SHIFT;
	LCD_SettingsStruct.ShiftDirection = RIGHT;
	LCD_SettingsStruct.DataLength = BITS_8;
	LCD_SettingsStruct.LineMode = LINES_2;
	LCD_SettingsStruct.CharSize = CHAR_5x7;
  LCD_ConfigureSettings(&LCD_SettingsStruct);
  
  while(1) {
    //osMutexWait(char_mutex, osWaitForever);
		
		osSignalWait(0x01,osWaitForever);
		LCD_WriteChar(&LCD, c);
		
		if (c == KEYPAD_SEND_COMMAND) {
			LCD_ClearDisplay(&LCD);
			LCD_WriteString(&LCD, "SENDING...");
			osDelay(1000);
			LCD_ClearDisplay(&LCD);
		}
		
		else if (c == KEYPAD_ERROR) {
			LCD_ClearDisplay(&LCD);
			LCD_WriteString(&LCD, "INPUT ERROR");
			osDelay(1000);
			LCD_ClearDisplay(&LCD);
		}
		osDelay(10);
		
    //osMutexRelease(char_mutex);
  }
}


void thread_direct_control(void const * argument) {
	
	//adapted from MBED handbook
	while(1) {
		
		osSignalWait(0x1, osWaitForever);
		
		osEvent evt = osMailGet(packet_mail_box, osWaitForever);
      if (evt.status == osEventMail) {
            g2_packet_t * recv_packet = (g2_packet_t * )evt.value.p;
            
            osMailFree(packet_mail_box, recv_packet);
}	
	
}
}
void thread_mimicking(void const * argument) {
		//adapted from MBED handbook
	
	int i;
	while(1) {
		
		osSignalWait(0x1, osWaitForever);
		
		osEvent evt = osMailGet(packet_mail_box, osWaitForever);
      if (evt.status == osEventMail) {
            g2_packet_t * recv_packet = (g2_packet_t * )evt.value.p;
            
            osMailFree(packet_mail_box, recv_packet);
					
				
				//osSignalSend()
				
}	
	
}
}

void thread_motor(void const * argument) {
	//osSignalWait()
}

void EXTI0_IRQHandler(void) {
		osSignalSet(tid_thread_wireless_master, 0x01);
		EXTI_ClearITPendingBit(EXTI_Line0);
}
