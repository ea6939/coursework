


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           fermatAssem
    3 00000000         fermatAssem
    4 00000000         ; put F1 in R1 and F2 in R2
    5 00000000         ; MOV R3, #8217 ; dummy value of N
    6 00000000         ; POP {R3} ; assumes that the top of the stack is N
    7 00000000 E92D 1FF0       PUSH             {R4-R12}
    8 00000004 4603            MOV              R3, R0
    9 00000006 2B00            CMP              R3, #0
   10 00000008 DD04            BLE              nonPositiveCase
   11 0000000A F003 0401       AND              R4, R3, #0x00000001
   12 0000000E 2C01            CMP              R4, #1
   13 00000010 D105            BNE              evenCase    ; if the last bit o
                                                            f R3 isn't 1, R3 is
                                                             even
   14 00000012 E009            B                oddCase
   15 00000014         nonPositiveCase
   16 00000014         ; if N <= 0, f1 := f2 := 0
   17 00000014 F04F 0100       MOV              R1, #0
   18 00000018 F04F 0200       MOV              R2, #0
   19 0000001C E05C            B                branchBack
   20 0000001E         evenCase
   21 0000001E         ; if N even, f1 := 2, f2 := N/2
   22 0000001E F04F 0102       MOV              R1, #2
   23 00000022 FB93 F2F1       SDIV             R2, R3, R1
   24 00000026 E057            B                branchBack
   25 00000028         oddCase
   26 00000028         ; R5 = x
   27 00000028         ; change Rmode to ceiling
   28 00000028 EEF1 8A10       MRS              R8, FPSCR
   29 0000002C F428 0800       AND              R8, #0xff7fffff
   30 00000030 F448 0880       ORR              R8, #0x00400000
   31 00000034 EEE1 8A10       MSR              FPSCR, R8
   32 00000038         
   33 00000038 EE00 3A10       VMOV.F32         S0, R3
   34 0000003C EEB8 0AC0       VCVT.F32.S32     S0, S0      ; convert int to fl
                                                            oat
   35 00000040 EEB1 0AC0       VSQRT.F32        S0, S0
   36 00000044 EEBD 0A40       VCVTR.S32.F32    S0, S0      ; convert float to 
                                                            int
   37 00000048 EE10 5A10       VMOV.F32         R5, S0
   38 0000004C FB05 F605       MUL              R6, R5, R5
   39 00000050         
   40 00000050         ; check whether 1 * 1 < R3, then 2 * 2, etc.
   41 00000050         ; if R5^2 > R3, ceil(sqrt(R3)) = R5 = x
   42 00000050         ; MOV R5, #0 ; R5 = x 
   43 00000050         ;findX
   44 00000050         ; ADD R5, R5, #1 ; increment
   45 00000050         ; MUL R6, R5, R5
   46 00000050         ; CMP R6, R3
   47 00000050         ; BLT findX ; keep incrementing until x^2 < R3
   48 00000050         
   49 00000050 EBA6 0703       SUB              R7, R6, R3  ; R7 = y^2 = x^2 - 
                                                            N
   50 00000054         
   51 00000054         ; now we know initial values of "x" and "y^2"
   52 00000054         ; increment x and change y^2 until y^2 is a square
   53 00000054         ; check whether y^2 is a square
   54 00000054         checkSquare



ARM Macro Assembler    Page 2 


   55 00000054 B500            PUSH             {LR}
   56 00000056 F000 F80B       BL               isYSquare   ; if yes, R0 = 1, i
                                                            f no, 0
   57 0000005A F85D EB04       POP              {LR}
   58 0000005E 2801            CMP              R0, #1
   59 00000060 D02C            BEQ              calculateY
   60 00000062 F105 0501       ADD              R5, R5, #1  ; x++
   61 00000066 FB05 F605       MUL              R6, R5, R5
   62 0000006A EBA6 0703       SUB              R7, R6, R3  ; y^2 = x*x - N
   63 0000006E E7F1            B                checkSquare
   64 00000070         
   65 00000070         ; once y^2 is a perfect square, use y to compute f1 and 
                       f2
   66 00000070         ; (first compute sqrt(y^2))
   67 00000070         
   68 00000070         ; put result into R0
   69 00000070         isYSquare                            ; assume y^2 is in 
                                                            R7
   70 00000070 B500            PUSH             {LR}        ; this value of LR 
                                                            is the next instruc
                                                            tion in the startup
                                                             file
   71 00000072 EE00 7A10       VMOV.F32         S0, R7      ; copy integer repr
                                                            esentation into FP 
                                                            reg
   72 00000076 EEB8 0AC0       VCVT.F32.S32     S0, S0      ; convert int to fl
                                                            oat
   73 0000007A         
   74 0000007A EEF1 8A10       MRS              R8, FPSCR
   75 0000007E F428 0880       AND              R8, #0xffbfffff ; floor mode
   76 00000082 F448 0800       ORR              R8, #0x00800000
   77 00000086 EEE1 8A10       MSR              FPSCR, R8
   78 0000008A         
   79 0000008A EEF1 0AC0       VSQRT.F32        S1, S0
   80 0000008E EEFD 0A60       VCVTR.S32.F32    S1, S1
   81 00000092         
   82 00000092         ; change Rmode to ceiling
   83 00000092 EEF1 8A10       MRS              R8, FPSCR
   84 00000096 F428 0800       AND              R8, #0xff7fffff
   85 0000009A F448 0880       ORR              R8, #0x00400000
   86 0000009E EEE1 8A10       MSR              FPSCR, R8
   87 000000A2         
   88 000000A2 EEB1 1AC0       VSQRT.F32        S2, S0
   89 000000A6 EEBD 1A41       VCVTR.S32.F32    S2, S2
   90 000000AA EE10 8A90       VMOV.F32         R8, S1
   91 000000AE EE11 9A10       VMOV.F32         R9, S2
   92 000000B2 45C8            CMP              R8,R9
   93 000000B4         
   94 000000B4 BF0C 2001       MOVEQ            R0, #1
   95 000000B8 2000            MOVNE            R0, #0
   96 000000BA BD00            POP              {PC}        ; this makes the ne
                                                            xt instruction to e
                                                            xecute the instruct
                                                            ion we linked from
   97 000000BC         
   98 000000BC         calculateY
   99 000000BC EE00 7A10       VMOV.F32         S0, R7      ; copy integer repr
                                                            esentation into FP 
                                                            reg



ARM Macro Assembler    Page 3 


  100 000000C0 EEB8 0AC0       VCVT.F32.S32     S0, S0      ; convert int to fl
                                                            oat
  101 000000C4 EEB1 0AC0       VSQRT.F32        S0, S0
  102 000000C8 EEBD 0AC0       VCVT.S32.F32     S0, S0      ; convert float to 
                                                            int
  103 000000CC EE10 8A10       VMOV.F32         R8, S0      ; now R8 contains y
                                                            
  104 000000D0         computeFactors
  105 000000D0 EB05 0108       ADD              R1, R5, R8  ; f1 = x+y
  106 000000D4 EBA5 0208       SUB              R2, R5, R8  ; f2 = x-y
  107 000000D8         
  108 000000D8         branchBack
  109 000000D8         ; PUSH {R3, R1, R2}
  110 000000D8 4608            MOV              R0, R1      ; needed for 2 fact
                                                            ors in one 64 bit n
                                                            umber
  111 000000DA 4611            MOV              R1, R2      ; 
  112 000000DC E8BD 1FF0       POP              {R4-R12}
  113 000000E0 4770            BX               LR
  114 000000E2                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\fer
matassem.d -o.\fermatassem.o -I"C:\Program Files\Keil\ARM\RV31\INC" -I"C:\Progr
am Files\Keil\ARM\CMSIS\Include" -I"C:\Program Files\Keil\ARM\Inc\ST\STM32F4xx"
 --predefine="__EVAL SETA 1" --list=.\fermatassem.lst fermatAssem.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

branchBack 000000D8

Symbol: branchBack
   Definitions
      At line 108 in file fermatAssem.s
   Uses
      At line 19 in file fermatAssem.s
      At line 24 in file fermatAssem.s

calculateY 000000BC

Symbol: calculateY
   Definitions
      At line 98 in file fermatAssem.s
   Uses
      At line 59 in file fermatAssem.s
Comment: calculateY used once
checkSquare 00000054

Symbol: checkSquare
   Definitions
      At line 54 in file fermatAssem.s
   Uses
      At line 63 in file fermatAssem.s
Comment: checkSquare used once
computeFactors 000000D0

Symbol: computeFactors
   Definitions
      At line 104 in file fermatAssem.s
   Uses
      None
Comment: computeFactors unused
evenCase 0000001E

Symbol: evenCase
   Definitions
      At line 20 in file fermatAssem.s
   Uses
      At line 13 in file fermatAssem.s
Comment: evenCase used once
fermatAssem 00000000

Symbol: fermatAssem
   Definitions
      At line 3 in file fermatAssem.s
   Uses
      At line 2 in file fermatAssem.s
Comment: fermatAssem used once
isYSquare 00000070

Symbol: isYSquare
   Definitions
      At line 69 in file fermatAssem.s
   Uses
      At line 56 in file fermatAssem.s
Comment: isYSquare used once
nonPositiveCase 00000014




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: nonPositiveCase
   Definitions
      At line 15 in file fermatAssem.s
   Uses
      At line 10 in file fermatAssem.s
Comment: nonPositiveCase used once
oddCase 00000028

Symbol: oddCase
   Definitions
      At line 25 in file fermatAssem.s
   Uses
      At line 14 in file fermatAssem.s
Comment: oddCase used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file fermatAssem.s
   Uses
      None
Comment: text unused
10 symbols
342 symbols in table
